// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Utils$ReactTemplate = require("../Utils.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var TextInput$ReactTemplate = require("./TextInput.bs.js");
var SelectQuestionType$ReactTemplate = require("./SelectQuestionType.bs.js");

function setDescription(question, description) {
  switch (question.tag | 0) {
    case 0 : 
        return /* TextField */Block.__(0, [description]);
    case 1 : 
        return /* TextArea */Block.__(1, [description]);
    case 2 : 
        return /* AlternateChoices */Block.__(2, [
                  description,
                  question[1]
                ]);
    case 3 : 
        return /* MultipleChoices */Block.__(3, [
                  description,
                  question[1]
                ]);
    
  }
}

function listSet(index, element, l) {
  return List.mapi((function (i, e) {
                if (i === index) {
                  return element;
                } else {
                  return e;
                }
              }), l);
}

function setChoice(question, index, choice) {
  switch (question.tag | 0) {
    case 0 : 
    case 1 : 
        throw Caml_builtin_exceptions.not_found;
    case 2 : 
        return /* AlternateChoices */Block.__(2, [
                  question[0],
                  listSet(index, choice, question[1])
                ]);
    case 3 : 
        return /* MultipleChoices */Block.__(3, [
                  question[0],
                  listSet(index, choice, question[1])
                ]);
    
  }
}

function appendChoice(question, choice) {
  switch (question.tag | 0) {
    case 0 : 
    case 1 : 
        throw Caml_builtin_exceptions.not_found;
    case 2 : 
        return /* AlternateChoices */Block.__(2, [
                  question[0],
                  List.append(question[1], /* :: */[
                        choice,
                        /* [] */0
                      ])
                ]);
    case 3 : 
        return /* MultipleChoices */Block.__(3, [
                  question[0],
                  List.append(question[1], /* :: */[
                        choice,
                        /* [] */0
                      ])
                ]);
    
  }
}

var component = ReasonReact.statelessComponent("QuestionField");

function make(question, onChange, id, _children) {
  var setDescription$1 = function (param) {
    return Utils$ReactTemplate.$pipe$neg((function (param) {
                  return setDescription(question, param);
                }), onChange, param);
  };
  var label;
  switch (question.tag | 0) {
    case 0 : 
        label = "Text field:";
        break;
    case 1 : 
        label = "Text area:";
        break;
    case 2 : 
        label = "Alternate choices:";
        break;
    case 3 : 
        label = "Multiple choices:";
        break;
    
  }
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var tmp;
              var exit = 0;
              switch (question.tag | 0) {
                case 0 : 
                case 1 : 
                    exit = 1;
                    break;
                case 2 : 
                case 3 : 
                    exit = 2;
                    break;
                
              }
              switch (exit) {
                case 1 : 
                    tmp = ReasonReact.element(undefined, undefined, TextInput$ReactTemplate.make(label, question[0], setDescription$1, /* array */[]));
                    break;
                case 2 : 
                    tmp = React.createElement("div", undefined, ReasonReact.element(undefined, undefined, TextInput$ReactTemplate.make(label, question[0], setDescription$1, /* array */[])), Utils$ReactTemplate.mapi((function (index, choice) {
                                  return ReasonReact.element(String(index), undefined, TextInput$ReactTemplate.make("Answer " + String(index + 1 | 0), choice, (function (param) {
                                                    var index$1 = index;
                                                    var choice = param;
                                                    return Curry._1(onChange, setChoice(question, index$1, choice));
                                                  }), /* array */[]));
                                }))(question[1]), React.createElement("button", {
                              type: "button",
                              onClick: (function (param) {
                                  var param$1 = "";
                                  return Utils$ReactTemplate.$pipe$neg((function (param) {
                                                return appendChoice(question, param);
                                              }), onChange, param$1);
                                })
                            }, Utils$ReactTemplate.s("Add choice")));
                    break;
                
              }
              return React.createElement("div", undefined, tmp, ReasonReact.element(undefined, undefined, SelectQuestionType$ReactTemplate.make(question, id, onChange, /* array */[])));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.setDescription = setDescription;
exports.listSet = listSet;
exports.setChoice = setChoice;
exports.appendChoice = appendChoice;
exports.component = component;
exports.make = make;
/* component Not a pure module */
