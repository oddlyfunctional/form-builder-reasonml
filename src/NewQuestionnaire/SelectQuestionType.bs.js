// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Utils$ReactTemplate = require("../Utils.bs.js");

function getDescription(param) {
  return param[0];
}

function getChoices(param) {
  switch (param.tag | 0) {
    case 0 : 
    case 1 : 
        return /* [] */0;
    case 2 : 
    case 3 : 
        return param[1];
    
  }
}

function isTextField(param) {
  if (param.tag) {
    return false;
  } else {
    return true;
  }
}

function isTextArea(param) {
  if (param.tag === 1) {
    return true;
  } else {
    return false;
  }
}

function isAlternateChoices(param) {
  if (param.tag === 2) {
    return true;
  } else {
    return false;
  }
}

function isMultipleChoices(param) {
  if (param.tag === 3) {
    return true;
  } else {
    return false;
  }
}

function makeTextField(question) {
  return /* TextField */Block.__(0, [question[0]]);
}

function makeTextArea(question) {
  return /* TextArea */Block.__(1, [question[0]]);
}

function makeAlternateChoices(question) {
  return /* AlternateChoices */Block.__(2, [
            question[0],
            getChoices(question)
          ]);
}

function makeMultipleChoices(question) {
  return /* MultipleChoices */Block.__(3, [
            question[0],
            getChoices(question)
          ]);
}

var component = ReasonReact.statelessComponent("SelectQuestionType");

function make(question, id, onChange, _children) {
  var name = "question-type-" + id;
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              return React.createElement("div", undefined, React.createElement("label", undefined, React.createElement("input", {
                                  checked: isTextField(question),
                                  name: name,
                                  type: "radio",
                                  onChange: (function (param) {
                                      return Curry._1(onChange, /* TextField */Block.__(0, [question[0]]));
                                    })
                                }), Utils$ReactTemplate.s("Text field")), React.createElement("label", undefined, React.createElement("input", {
                                  checked: isTextArea(question),
                                  name: name,
                                  type: "radio",
                                  onChange: (function (param) {
                                      return Curry._1(onChange, /* TextArea */Block.__(1, [question[0]]));
                                    })
                                }), Utils$ReactTemplate.s("Text area")), React.createElement("label", undefined, React.createElement("input", {
                                  checked: isAlternateChoices(question),
                                  name: name,
                                  type: "radio",
                                  onChange: (function (param) {
                                      return Curry._1(onChange, makeAlternateChoices(question));
                                    })
                                }), Utils$ReactTemplate.s("Alternate choices")), React.createElement("label", undefined, React.createElement("input", {
                                  checked: isMultipleChoices(question),
                                  name: name,
                                  type: "radio",
                                  onChange: (function (param) {
                                      return Curry._1(onChange, makeMultipleChoices(question));
                                    })
                                }), Utils$ReactTemplate.s("Multiple choices")));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.getDescription = getDescription;
exports.getChoices = getChoices;
exports.isTextField = isTextField;
exports.isTextArea = isTextArea;
exports.isAlternateChoices = isAlternateChoices;
exports.isMultipleChoices = isMultipleChoices;
exports.makeTextField = makeTextField;
exports.makeTextArea = makeTextArea;
exports.makeAlternateChoices = makeAlternateChoices;
exports.makeMultipleChoices = makeMultipleChoices;
exports.component = component;
exports.make = make;
/* component Not a pure module */
