// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var $$String = require("bs-platform/lib/js/string.js");
var Utils$ReactTemplate = require("../src/Utils.bs.js");

describe("Utils", (function () {
        Jest.test("s", (function (param) {
                return Jest.Expect[/* toBe */2]("test", Jest.Expect[/* expect */0](Utils$ReactTemplate.s("test")));
              }));
        Jest.test("|- compose operator", (function (param) {
                var f = function (param) {
                  return 1 + param | 0;
                };
                var g = function (param) {
                  return (param << 1);
                };
                return Jest.Expect[/* toBe */2](6, Jest.Expect[/* expect */0](Utils$ReactTemplate.$pipe$neg(f, g, 2)));
              }));
        Jest.test("map", (function (param) {
                return Jest.Expect[/* toEqual */12](/* array */[Utils$ReactTemplate.s("A")], Jest.Expect[/* expect */0](Utils$ReactTemplate.map((function (param) {
                                        return Utils$ReactTemplate.$pipe$neg($$String.uppercase, Utils$ReactTemplate.s, param);
                                      }))(/* :: */[
                                    "a",
                                    /* [] */0
                                  ])));
              }));
        return Jest.test("mapi", (function (param) {
                      return Jest.Expect[/* toEqual */12](/* array */[
                                  Utils$ReactTemplate.s("1"),
                                  Utils$ReactTemplate.s("3")
                                ], Jest.Expect[/* expect */0](Utils$ReactTemplate.mapi((function (a, b) {
                                              return Utils$ReactTemplate.$pipe$neg((function (prim) {
                                                            return String(prim);
                                                          }), Utils$ReactTemplate.s, a + b | 0);
                                            }))(/* :: */[
                                          1,
                                          /* :: */[
                                            2,
                                            /* [] */0
                                          ]
                                        ])));
                    }));
      }));

/*  Not a pure module */
