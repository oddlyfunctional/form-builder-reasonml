// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReactTestingLibrary = require("bs-react-testing-library/src/ReactTestingLibrary.bs.js");
var Answer$ReactTemplate = require("../src/Answer.bs.js");
var TextField$ReactTemplate = require("../src/TextField.bs.js");

describe("Answer", (function () {
        var build = function ($staropt$star, $staropt$star$1, $staropt$star$2, param) {
          var description = $staropt$star !== undefined ? $staropt$star : "";
          var value = $staropt$star$1 !== undefined ? Js_primitive.valFromOption($staropt$star$1) : Answer$ReactTemplate.empty;
          var onChange = $staropt$star$2 !== undefined ? $staropt$star$2 : (function (param) {
                return /* () */0;
              });
          return ReactTestingLibrary.render(undefined, undefined, ReasonReact.element(undefined, undefined, TextField$ReactTemplate.make(description, value, onChange, /* array */[])));
        };
        Jest.test("renders the description", (function (param) {
                var description = "test description";
                var partial_arg = /* `Str */[
                  4153489,
                  description
                ];
                var title = (function (eta) {
                      var param = undefined;
                      var param$1 = eta;
                      return ReactTestingLibrary.getByText(partial_arg, param, param$1);
                    })(build(description, undefined, undefined, /* () */0));
                return Jest.Expect[/* toMatchSnapshot */16](Jest.Expect[/* expect */0](title));
              }));
        Jest.test("sets the value for the input", (function (param) {
                var answer = "test answer";
                var value = Curry._1(Answer$ReactTemplate.make, answer);
                var input = ReactTestingLibrary.getByValue(answer, build(undefined, Js_primitive.some(value), undefined, /* () */0));
                return Jest.Expect[/* toMatchSnapshot */16](Jest.Expect[/* expect */0](input));
              }));
        return Jest.Skip[/* test */0]("calls onChange", (function (param) {
                      var result = /* record */[/* contents */Answer$ReactTemplate.empty];
                      var onChange = function (answer) {
                        result[0] = answer;
                        return /* () */0;
                      };
                      var answer = "test answer";
                      var value = Curry._1(Answer$ReactTemplate.make, answer);
                      ReactTestingLibrary.getByValue(answer, build(undefined, Js_primitive.some(value), onChange, /* () */0));
                      return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](true));
                    }));
      }));

/*  Not a pure module */
